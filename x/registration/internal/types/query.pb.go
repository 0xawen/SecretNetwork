// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: secret/registration/v1beta1/query.proto

package types

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryKeyRequest struct {
	// Types that are valid to be assigned to XKey:
	//	*QueryKeyRequest_Key
	XKey isQueryKeyRequest_XKey `protobuf_oneof:"_key"`
}

func (m *QueryKeyRequest) Reset()         { *m = QueryKeyRequest{} }
func (m *QueryKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequest) ProtoMessage()    {}
func (*QueryKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ee71413f073b37c, []int{0}
}
func (m *QueryKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequest.Merge(m, src)
}
func (m *QueryKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequest proto.InternalMessageInfo

type isQueryKeyRequest_XKey interface {
	isQueryKeyRequest_XKey()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryKeyRequest_Key struct {
	Key bool `protobuf:"varint,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (*QueryKeyRequest_Key) isQueryKeyRequest_XKey() {}

func (m *QueryKeyRequest) GetXKey() isQueryKeyRequest_XKey {
	if m != nil {
		return m.XKey
	}
	return nil
}

func (m *QueryKeyRequest) GetKey() bool {
	if x, ok := m.GetXKey().(*QueryKeyRequest_Key); ok {
		return x.Key
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryKeyRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryKeyRequest_Key)(nil),
	}
}

type QueryEncryptedSeedRequest struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *QueryEncryptedSeedRequest) Reset()         { *m = QueryEncryptedSeedRequest{} }
func (m *QueryEncryptedSeedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedSeedRequest) ProtoMessage()    {}
func (*QueryEncryptedSeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ee71413f073b37c, []int{1}
}
func (m *QueryEncryptedSeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedSeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedSeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedSeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedSeedRequest.Merge(m, src)
}
func (m *QueryEncryptedSeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedSeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedSeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedSeedRequest proto.InternalMessageInfo

type QueryEncryptedSeedResponse struct {
	EncryptedSeed []byte `protobuf:"bytes,1,opt,name=encrypted_seed,json=encryptedSeed,proto3" json:"encrypted_seed,omitempty"`
}

func (m *QueryEncryptedSeedResponse) Reset()         { *m = QueryEncryptedSeedResponse{} }
func (m *QueryEncryptedSeedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedSeedResponse) ProtoMessage()    {}
func (*QueryEncryptedSeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ee71413f073b37c, []int{2}
}
func (m *QueryEncryptedSeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedSeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedSeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedSeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedSeedResponse.Merge(m, src)
}
func (m *QueryEncryptedSeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedSeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedSeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedSeedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryKeyRequest)(nil), "secret.registration.v1beta1.QueryKeyRequest")
	proto.RegisterType((*QueryEncryptedSeedRequest)(nil), "secret.registration.v1beta1.QueryEncryptedSeedRequest")
	proto.RegisterType((*QueryEncryptedSeedResponse)(nil), "secret.registration.v1beta1.QueryEncryptedSeedResponse")
}

func init() {
	proto.RegisterFile("secret/registration/v1beta1/query.proto", fileDescriptor_7ee71413f073b37c)
}

var fileDescriptor_7ee71413f073b37c = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x6a, 0x14, 0x31,
	0x1c, 0xc6, 0x27, 0xd6, 0xae, 0x12, 0xac, 0x85, 0xa0, 0xa8, 0xd3, 0x12, 0xca, 0x62, 0xb5, 0x82,
	0x9d, 0xb4, 0x2a, 0xf5, 0x2a, 0x15, 0x41, 0x58, 0x10, 0xdc, 0x7a, 0xf2, 0xb2, 0xcc, 0xec, 0xfe,
	0x8d, 0xc3, 0x76, 0x92, 0x34, 0xc9, 0xe8, 0x06, 0xe9, 0xc5, 0x93, 0x47, 0xc5, 0x97, 0xf0, 0x11,
	0x7c, 0x84, 0x1e, 0x0b, 0x22, 0x78, 0xd4, 0x5d, 0x1f, 0x44, 0x26, 0x9b, 0x95, 0x5d, 0x19, 0x46,
	0x3c, 0x78, 0x9b, 0xcc, 0xff, 0xfb, 0xbe, 0xfc, 0x92, 0x2f, 0xf8, 0xa6, 0x81, 0xbe, 0x06, 0xcb,
	0x34, 0xf0, 0xdc, 0x58, 0x9d, 0xda, 0x5c, 0x0a, 0xf6, 0x6a, 0x37, 0x03, 0x9b, 0xee, 0xb2, 0xa3,
	0x12, 0xb4, 0x4b, 0x94, 0x96, 0x56, 0x92, 0xb5, 0xa9, 0x30, 0x99, 0x17, 0x26, 0x41, 0x18, 0x5f,
	0xe2, 0x92, 0x4b, 0xaf, 0x63, 0xd5, 0xd7, 0xd4, 0x12, 0xaf, 0x71, 0x29, 0xf9, 0x21, 0x30, 0xbf,
	0xca, 0xca, 0x17, 0x0c, 0x0a, 0x65, 0x43, 0x5e, 0xbc, 0x1e, 0x86, 0xa9, 0xca, 0x59, 0x2a, 0x84,
	0xb4, 0x3e, 0xd1, 0x84, 0xe9, 0x66, 0x13, 0x56, 0x61, 0x78, 0x90, 0xdd, 0x6a, 0x92, 0x71, 0x10,
	0x60, 0xf2, 0x90, 0xd8, 0xde, 0xc1, 0xab, 0x4f, 0xab, 0xe3, 0x74, 0xc0, 0x75, 0xe1, 0xa8, 0x04,
	0x63, 0xc9, 0x65, 0xbc, 0x34, 0x04, 0x77, 0x15, 0x6d, 0xa0, 0xad, 0xf3, 0x8f, 0xa3, 0x6e, 0xb5,
	0x78, 0x87, 0xd0, 0x7e, 0x0b, 0x9f, 0xed, 0x0d, 0xc1, 0xb5, 0xef, 0xe1, 0x6b, 0xde, 0xf1, 0x48,
	0xf4, 0xb5, 0x53, 0x16, 0x06, 0x07, 0x00, 0x83, 0x99, 0xf7, 0x0a, 0x3e, 0xa7, 0xca, 0xac, 0x37,
	0xf3, 0x5f, 0xe8, 0xb6, 0x54, 0x99, 0x75, 0xc0, 0xb5, 0x1f, 0xe2, 0xb8, 0xce, 0x65, 0x94, 0x14,
	0x06, 0xc8, 0x26, 0xbe, 0x08, 0xb3, 0x41, 0xcf, 0x00, 0x0c, 0x82, 0x7b, 0x05, 0xe6, 0xe5, 0x77,
	0xbe, 0x2e, 0xe1, 0x65, 0x9f, 0x42, 0x8e, 0xf1, 0xf2, 0xb3, 0x51, 0x07, 0x1c, 0xb9, 0x9d, 0x34,
	0x14, 0x90, 0xfc, 0x71, 0xb4, 0x78, 0xa3, 0x51, 0x5d, 0x71, 0x5e, 0x7f, 0xfb, 0xe5, 0xe7, 0xc7,
	0x33, 0x94, 0xac, 0xd7, 0x5f, 0x9e, 0x1d, 0x6d, 0x0f, 0xc1, 0x91, 0x0f, 0x08, 0xaf, 0x76, 0xe7,
	0xe6, 0xff, 0x83, 0x24, 0xf1, 0x24, 0x5b, 0xe4, 0x46, 0x3d, 0xc9, 0xfc, 0x4f, 0xcf, 0xf4, 0x19,
	0xe1, 0x95, 0x85, 0xdb, 0x25, 0x7b, 0x7f, 0x27, 0xaa, 0x2b, 0x31, 0xbe, 0xff, 0xcf, 0xbe, 0x69,
	0x8d, 0xed, 0x3d, 0x8f, 0xbc, 0x43, 0x92, 0x7a, 0xe4, 0xdf, 0x65, 0x6e, 0x57, 0x15, 0xb3, 0x37,
	0xe1, 0xa5, 0x1c, 0xef, 0x67, 0x27, 0x3f, 0x68, 0xf4, 0x69, 0x4c, 0xd1, 0xc9, 0x98, 0xa2, 0xd3,
	0x31, 0x45, 0xdf, 0xc7, 0x14, 0xbd, 0x9f, 0xd0, 0xe8, 0x74, 0x42, 0xa3, 0x6f, 0x13, 0x1a, 0x3d,
	0x7f, 0xc0, 0x73, 0xfb, 0xb2, 0xcc, 0x92, 0xbe, 0x2c, 0x18, 0x88, 0x9c, 0x17, 0x69, 0xa1, 0xfa,
	0xec, 0xc0, 0x63, 0x3e, 0x01, 0xfb, 0x5a, 0xea, 0x21, 0x1b, 0x2d, 0xee, 0x9a, 0x0b, 0x0b, 0x5a,
	0xa4, 0x87, 0xcc, 0x3a, 0x05, 0x26, 0x6b, 0xf9, 0xf7, 0x7e, 0xf7, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x5b, 0xb1, 0xe7, 0x09, 0xda, 0x03, 0x00, 0x00,
}

func (this *QueryKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryKeyRequest)
	if !ok {
		that2, ok := that.(QueryKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.XKey == nil {
		if this.XKey != nil {
			return false
		}
	} else if this.XKey == nil {
		return false
	} else if !this.XKey.Equal(that1.XKey) {
		return false
	}
	return true
}
func (this *QueryKeyRequest_Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryKeyRequest_Key)
	if !ok {
		that2, ok := that.(QueryKeyRequest_Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *QueryEncryptedSeedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryEncryptedSeedRequest)
	if !ok {
		that2, ok := that.(QueryEncryptedSeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PubKey, that1.PubKey) {
		return false
	}
	return true
}
func (this *QueryEncryptedSeedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryEncryptedSeedResponse)
	if !ok {
		that2, ok := that.(QueryEncryptedSeedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.EncryptedSeed, that1.EncryptedSeed) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns the key used for transactions
	TxKey(ctx context.Context, in *QueryKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Returns the key used for registration
	RegistrationKey(ctx context.Context, in *QueryKeyRequest, opts ...grpc.CallOption) (*Key, error)
	// Returns the encrypted seed for a registered node by public key
	EncryptedSeed(ctx context.Context, in *QueryEncryptedSeedRequest, opts ...grpc.CallOption) (*QueryEncryptedSeedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TxKey(ctx context.Context, in *QueryKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/secret.registration.v1beta1.Query/TxKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistrationKey(ctx context.Context, in *QueryKeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/secret.registration.v1beta1.Query/RegistrationKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedSeed(ctx context.Context, in *QueryEncryptedSeedRequest, opts ...grpc.CallOption) (*QueryEncryptedSeedResponse, error) {
	out := new(QueryEncryptedSeedResponse)
	err := c.cc.Invoke(ctx, "/secret.registration.v1beta1.Query/EncryptedSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns the key used for transactions
	TxKey(context.Context, *QueryKeyRequest) (*Key, error)
	// Returns the key used for registration
	RegistrationKey(context.Context, *QueryKeyRequest) (*Key, error)
	// Returns the encrypted seed for a registered node by public key
	EncryptedSeed(context.Context, *QueryEncryptedSeedRequest) (*QueryEncryptedSeedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TxKey(ctx context.Context, req *QueryKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxKey not implemented")
}
func (*UnimplementedQueryServer) RegistrationKey(ctx context.Context, req *QueryKeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationKey not implemented")
}
func (*UnimplementedQueryServer) EncryptedSeed(ctx context.Context, req *QueryEncryptedSeedRequest) (*QueryEncryptedSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedSeed not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TxKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.registration.v1beta1.Query/TxKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxKey(ctx, req.(*QueryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistrationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistrationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.registration.v1beta1.Query/RegistrationKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistrationKey(ctx, req.(*QueryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncryptedSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.registration.v1beta1.Query/EncryptedSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedSeed(ctx, req.(*QueryEncryptedSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "secret.registration.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TxKey",
			Handler:    _Query_TxKey_Handler,
		},
		{
			MethodName: "RegistrationKey",
			Handler:    _Query_RegistrationKey_Handler,
		},
		{
			MethodName: "EncryptedSeed",
			Handler:    _Query_EncryptedSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret/registration/v1beta1/query.proto",
}

func (m *QueryKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XKey != nil {
		{
			size := m.XKey.Size()
			i -= size
			if _, err := m.XKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequest_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequest_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Key {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *QueryEncryptedSeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedSeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedSeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedSeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedSeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedSeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedSeed) > 0 {
		i -= len(m.EncryptedSeed)
		copy(dAtA[i:], m.EncryptedSeed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncryptedSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XKey != nil {
		n += m.XKey.Size()
	}
	return n
}

func (m *QueryKeyRequest_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *QueryEncryptedSeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncryptedSeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedSeed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.XKey = &QueryKeyRequest_Key{b}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedSeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedSeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedSeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedSeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedSeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedSeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSeed = append(m.EncryptedSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSeed == nil {
				m.EncryptedSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
